#include <QtTest>
#include <QCoreApplication>

#include <generator/generator.h>
#include <util/serializer/jsonserializer.h>

class GeneratorTest : public QObject
{
    Q_OBJECT

public:
    GeneratorTest();
    ~GeneratorTest() {}

private slots:
    void generateTest();
    void distributionTest();
    void outerIfUnableInnerTest();
    void changeBranchingTest();

private:
    QString datamodelsDir;
    QList<Library*> libraries;

    void readLibraries();

    bool containsOuter(Scheme* s);

    Scheme* scheme;
};

GeneratorTest::GeneratorTest()
{
    QDir dir (QApplication::applicationDirPath());
    dir.cdUp();
    datamodelsDir = dir.absolutePath();

    readLibraries();
}

void GeneratorTest::readLibraries()
{
    libraries.clear();

    QFile f(datamodelsDir+"/datamodels/library_generator.json");
    f.open(QIODevice::ReadOnly);
    JsonSerializer json;
    libraries.append(static_cast<Library*>(json.deserialize(f.readAll())));
    f.close();
}

void GeneratorTest::generateTest()
{
    readLibraries();
    libraries.at(0)->getElements().removeAt(1);
    GeneratorParameters param(libraries);

    param.setElementsNumber(5);

    Generator* g = new Generator(param);
    Scheme* s = g->generate();

    for(Wire w: s->getWires())
    {
        QString srcPinId = w.getSrcPinId();
        QString destPinId = w.getDestPinId();

        for(Pin p: libraries[0]->getElements()[0].getPins())
        {
            if(p.getId() == srcPinId)
                QVERIFY(p.getType() == PinType::Output);
            else if (p.getId() == destPinId)
                QVERIFY(p.getType() == PinType::Input);
        }
    }

    delete s;
    delete g;

    readLibraries();
    param = GeneratorParameters(libraries);
    g = new Generator(param);
    s = g->generate();

    delete s;
    delete g;
}

void GeneratorTest::distributionTest()
{
    readLibraries();
    GeneratorParameters param(libraries);

    param.setElementsNumber(50);

    param.setNodeCapacity(3, 0.1, 3, 3);
    param.setBranching(4, 0.2, 4, 4);

    Generator* g = new Generator(param);
    Scheme* s = g->generate();

    QVERIFY(s->getElements().size() == 50);
    QVERIFY(s->getWires().size() == 200);

    delete s;
    delete g;
}

void GeneratorTest::outerIfUnableInnerTest()
{
    readLibraries();
    libraries.at(0)->getElements().removeAt(1);
    GeneratorParameters param(libraries);

    param.setElementsNumber(5);

    param.setNodeCapacity(1, 0.1, 1, 1);
    param.setBranching(3, 0.2, 3, 3);
    param.setInnerWireChance(1);

    Generator* g = new Generator(param);
    Scheme* s = g->generate();

    QVERIFY(containsOuter(s));

    delete s;
    delete g;
}

bool GeneratorTest::containsOuter(Scheme *s)
{
    for(Wire w: s->getWires())
        if(w.getType() == WireType::Outer)
            return true;

    return false;
}

void GeneratorTest::changeBranchingTest()
{
    readLibraries();
    libraries.at(0)->getElements().removeAt(1);
    GeneratorParameters param(libraries);

    param.setElementsNumber(3);

    param.setNodeCapacity(1, 0.1, 1, 1);
    param.setBranching(7, 0.2, 7, 7);

    Generator* g = new Generator(param);
    Scheme* s = g->generate();
    QVERIFY(param.getBranchingMean() == 6);
    QVERIFY(param.getBranchingLeftLimit() == 6);
    QVERIFY(param.getBranchingRightLimit() == 6);

    delete s;
    delete g;
}

QTEST_MAIN(GeneratorTest)

#include "tst_generatortest.moc"
